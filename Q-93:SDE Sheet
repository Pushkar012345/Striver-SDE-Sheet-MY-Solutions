/*
Q:Given a string s, return the longest 
palindromic
 
substring
 in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.
*/

/*
Approach
LPS0.png

The only tricky thing is that you have to be sure the right substring is returned in expand(). The loop ends only after expanding the range by 1 on both sides, so you have to remove those in the final returned string.

Here we basically choose each centre and try expanding from each and every specific node thus we call expand functionas expand(i,i) and expand(i,i+1) and later we apply two pointers on each node to find the longest palindrome

LPS.png

In fact, we could solve it in O(n2)O(n^2)O(n 
2
 ) time using only constant space.

We observe that a palindrome mirrors around its center. Therefore, a palindrome can be expanded from its center, and there are only 2n−12n−12n−1 such centers.

You might be asking why there are 2n−12n - 12n−1 but not nnn centers? The reason is the center of a palindrome can be in between two letters. Such palindromes have even number of letters (such as "abba") and its center are between the two 'b's.

Code
class Solution {
public:
    string ans = "";
    void expand(string &s , int left ,int right)
    {
        while(left >= 0 &&  right < s.size())
        {
            if(s[left] != s[right])
                break;
            left--,right++;
        }
        if(ans.size() < right - left )
            ans = s.substr(left + 1 , right - left - 1);
    }
    string longestPalindrome(string s) {
        for(int i = 0 ; i < s.size() ; i++)
        {
            expand(s , i , i);
            expand(s , i , i+1);
        }
        return ans;
    }
};
Complexity
Time Complexity: O(n2)O(n^2)O(n 
2
 ) as there is two recursion calls which are applied as two pointers so here Complexity would beO(n2). O(n^2).O(n 
2
 ).

Space Complexity: O(n)O(n)O(n) which is nothing but the storage consumed in this process.
*/
